{
  "name": "dance",
  "displayName": "Dance",
  "description": "Make those cursors dance with Kakoune-inspired keybindings.",
  "version": "0.4.2",
  "license": "ISC",
  "publisher": "gregoire",
  "author": {
    "name": "Gr√©goire Geis",
    "email": "opensource@gregoirege.is"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/71/dance.git"
  },
  "readme": "README.md",
  "categories": [
    "Keymaps",
    "Other"
  ],
  "dance.disableArbitraryCodeExecution": false,
  "dance.disableArbitraryCommandExecution": false,
  "main": "./out/src/extension.js",
  "engines": {
    "vscode": "^1.44.0"
  },
  "scripts": {
    "check": "eslint .",
    "format": "eslint . --fix",
    "generate": "ts-node ./src/meta.ts && ts-node ./package.ts",
    "vscode:prepublish": "yarn run generate && yarn run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "yarn run compile && node ./out/test/run.js",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^8.0.3",
    "@types/node": "^14.6.0",
    "@types/vscode": "^1.44.0",
    "@typescript-eslint/eslint-plugin": "^4.18.0",
    "@typescript-eslint/parser": "^4.18.0",
    "eslint": "^7.22.0",
    "glob": "^7.1.6",
    "mocha": "^8.1.1",
    "source-map-support": "^0.5.19",
    "ts-node": "^9.1.1",
    "typescript": "^4.2.4",
    "unexpected": "^12.0.0",
    "vsce": "^1.87.0",
    "vscode-test": "^1.3.0"
  },
  "activationEvents": [
    "*"
  ],
  "extensionKind": [
    "ui",
    "workspace"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Dance",
      "properties": {
        "dance.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the Dance keybindings are enabled."
        },
        "dance.defaultMode": {
          "type": "string",
          "default": "normal",
          "description": "Controls which mode is set by default when an editor is created."
        },
        "dance.modes": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "cursorStyle": {
                      "enum": [
                        "line",
                        "block",
                        "underline",
                        "line-thin",
                        "block-outline",
                        "underline-thin",
                        "inherit"
                      ],
                      "description": "Controls the cursor style."
                    },
                    "inheritFrom": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Controls how default configuration options are obtained for this mode. Specify a string to inherit from the mode with the given name, and null to inherit from the VS Code configuration."
                    },
                    "lineHighlight": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "markdownDescription": "Controls the line highlighting applied to active lines. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null."
                    },
                    "lineNumbers": {
                      "enum": [
                        "off",
                        "on",
                        "relative",
                        "inherit"
                      ],
                      "description": "Controls the display of line numbers.",
                      "enumDescriptions": [
                        "No line numbers.",
                        "Absolute line numbers.",
                        "Relative line numbers.",
                        "Inherit from `editor.lineNumbers`."
                      ]
                    },
                    "onEnterMode": {
                      "type": "array",
                      "items": {
                        "type": [
                          "array",
                          "object",
                          "string"
                        ],
                        "properties": {
                          "command": {
                            "type": "string"
                          },
                          "args": {}
                        },
                        "required": [
                          "command"
                        ]
                      },
                      "description": "Controls what commands should be executed upon entering this mode."
                    },
                    "onLeaveMode": {
                      "type": "array",
                      "items": {
                        "type": [
                          "array",
                          "object",
                          "string"
                        ],
                        "properties": {
                          "command": {
                            "type": "string"
                          },
                          "args": {}
                        },
                        "required": [
                          "command"
                        ]
                      },
                      "description": "Controls what commands should be executed upon leaving this mode."
                    },
                    "selectionBehavior": {
                      "enum": [
                        "caret",
                        "character"
                      ],
                      "default": "caret",
                      "description": "Controls how selections behave within VS Code.",
                      "markdownEnumDescriptions": [
                        "Selections are anchored to carets, which is the native VS Code behavior; that is, they are positioned *between* characters and can therefore be empty.",
                        "Selections are anchored to characters, like Kakoune; that is, they are positioned *on* characters, and therefore cannot be empty. Additionally, one-character selections will behave as if they were non-directional, like Kakoune."
                      ]
                    },
                    "selectionStyle": {
                      "type": "object",
                      "description": "The style to apply to selections.",
                      "properties": {
                        "backgroundColor": {
                          "type": "string"
                        },
                        "borderColor": {
                          "type": "string"
                        },
                        "borderStyle": {
                          "type": "string"
                        },
                        "borderWidth": {
                          "type": "string"
                        },
                        "borderRadius": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          "default": {
            "insert": {
              "cursorStyle": "inherit",
              "lineHighlight": null,
              "lineNumbers": "inherit",
              "selectionStyle": null
            },
            "normal": {
              "cursorStyle": "inherit",
              "lineHighlight": "editor.hoverHighlightBackground",
              "lineNumbers": "relative",
              "onEnterMode": [
                {
                  "command": ".trackSelections",
                  "args": {
                    "style": {
                      "borderColor": "$editor.selectionBackground",
                      "borderStyle": "solid",
                      "borderWidth": "2px",
                      "borderRadius": "1px"
                    }
                  }
                }
              ],
              "onLeaveMode": [
                {
                  "command": ".restoreSelections",
                  "args": {}
                }
              ],
              "selectionStyle": null
            }
          },
          "markdownDescription": "Controls the different modes available in Dance."
        },
        "dance.normalMode.lineHighlight": {
          "type": [
            "string",
            "null"
          ],
          "default": "editor.hoverHighlightBackground",
          "markdownDescription": "Controls the line highlighting applied to active lines in normal mode. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null.",
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.insertMode.lineHighlight": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "markdownDescription": "Controls the line highlighting applied to active lines in insert mode. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null.",
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.normalMode.lineNumbers": {
          "enum": [
            "off",
            "on",
            "relative",
            "inherit"
          ],
          "default": "relative",
          "description": "Controls the display of line numbers in normal mode.",
          "enumDescriptions": [
            "No line numbers.",
            "Absolute line numbers.",
            "Relative line numbers.",
            "Inherit from `editor.lineNumbers`."
          ],
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.insertMode.lineNumbers": {
          "enum": [
            "off",
            "on",
            "relative",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the display of line numbers in insert mode.",
          "enumDescriptions": [
            "No line numbers.",
            "Absolute line numbers.",
            "Relative line numbers.",
            "Inherit from `editor.lineNumbers`."
          ],
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.normalMode.cursorStyle": {
          "enum": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the cursor style in normal mode.",
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.insertMode.cursorStyle": {
          "enum": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the cursor style in insert mode.",
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.insertMode.selectionStyle": {
          "type": "object",
          "default": {
            "borderColor": "$editor.selectionBackground",
            "borderStyle": "solid",
            "borderWidth": "2px",
            "borderRadius": "1px"
          },
          "description": "The style to apply to selections in insert mode.",
          "properties": {
            "backgroundColor": {
              "type": "string"
            },
            "borderColor": {
              "type": "string"
            },
            "borderStyle": {
              "type": "string"
            },
            "borderWidth": {
              "type": "string"
            },
            "borderRadius": {
              "type": "string"
            }
          },
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.selectionBehavior": {
          "enum": [
            "caret",
            "character"
          ],
          "default": "caret",
          "description": "Controls how selections behave within VS Code.",
          "markdownEnumDescriptions": [
            "Selections are anchored to carets, which is the native VS Code behavior; that is, they are positioned *between* characters and can therefore be empty.",
            "Selections are anchored to characters, like Kakoune; that is, they are positioned *on* characters, and therefore cannot be empty. Additionally, one-character selections will behave as if they were non-directional, like Kakoune."
          ],
          "deprecationMessage": "Built-in modes are deprecated. Use dance.modes instead."
        },
        "dance.menus": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          "default": {
            "object": {
              "items": {
                "b()": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "parens"
                    }
                  ],
                  "text": "parenthesis block"
                },
                "B{}": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "braces"
                    }
                  ],
                  "text": "braces block"
                },
                "r[]": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "brackets"
                    }
                  ],
                  "text": "brackets block"
                },
                "a<>": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "angleBrackets"
                    }
                  ],
                  "text": "angle block"
                },
                "Q\"": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "doubleQuoteString"
                    }
                  ],
                  "text": "double quote string"
                },
                "q'": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "singleQuoteString"
                    }
                  ],
                  "text": "single quote string"
                },
                "g`": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "graveQuoteString"
                    }
                  ],
                  "text": "grave quote string"
                },
                "w": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "word"
                    }
                  ],
                  "text": "word"
                },
                "W": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "WORD"
                    }
                  ],
                  "text": "WORD"
                },
                "s": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "sentence"
                    }
                  ],
                  "text": "sentence"
                },
                "p": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "paragraph"
                    }
                  ],
                  "text": "paragraph"
                },
                " ": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "whitespaces"
                    }
                  ],
                  "text": "whitespaces"
                },
                "i": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "indent"
                    }
                  ],
                  "text": "indent"
                },
                "n": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "number"
                    }
                  ],
                  "text": "number"
                },
                "u": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "argument"
                    }
                  ],
                  "text": "argument"
                },
                "c": {
                  "command": "dance.objects.performSelection",
                  "args": [
                    {
                      "object": "custom"
                    }
                  ],
                  "text": "custom object desc"
                }
              }
            },
            "goto": {
              "items": {
                "h": {
                  "text": "go to line start",
                  "command": "dance.goto.lineStart"
                },
                "l": {
                  "text": "go to line end",
                  "command": "dance.goto.lineEnd"
                },
                "i": {
                  "text": "go to non-blank line start",
                  "command": "dance.goto.lineStart.nonBlank"
                },
                "g": {
                  "text": "go to first line",
                  "command": "dance.goto.firstLine"
                },
                "k": {
                  "text": "go to first line",
                  "command": "dance.goto.firstLine"
                },
                "j": {
                  "text": "go to last line",
                  "command": "dance.goto.lastLine"
                },
                "e": {
                  "text": "go to last char of last line",
                  "command": "dance.goto.lastCharacter"
                },
                "t": {
                  "text": "go to the first displayed line",
                  "command": "dance.goto.firstVisibleLine"
                },
                "c": {
                  "text": "go to the middle displayed line",
                  "command": "dance.goto.middleVisibleLine"
                },
                "b": {
                  "text": "go to the last displayed line",
                  "command": "dance.goto.lastVisibleLine"
                },
                "f": {
                  "text": "go to file whose name is selected",
                  "command": "dance.goto.selectedFile"
                },
                ".": {
                  "text": "go to last buffer modification position",
                  "command": "dance.goto.lastModification"
                }
              }
            },
            "goto.extend": {
              "items": {
                "h": {
                  "text": "extend to line start",
                  "command": "dance.goto.lineStart.extend"
                },
                "l": {
                  "text": "extend to line end",
                  "command": "dance.goto.lineEnd.extend"
                },
                "i": {
                  "text": "extend to non-blank line start",
                  "command": "dance.goto.lineStart.nonBlank.extend"
                },
                "g": {
                  "text": "extend to first line",
                  "command": "dance.goto.firstLine.extend"
                },
                "k": {
                  "text": "extend to first line",
                  "command": "dance.goto.firstLine.extend"
                },
                "j": {
                  "text": "extend to last line",
                  "command": "dance.goto.lastLine.extend"
                },
                "e": {
                  "text": "extend to last char of last line",
                  "command": "dance.goto.lastCharacter.extend"
                },
                "t": {
                  "text": "extend to the first displayed line",
                  "command": "dance.goto.firstVisibleLine.extend"
                },
                "c": {
                  "text": "extend to the middle displayed line",
                  "command": "dance.goto.middleVisibleLine.extend"
                },
                "b": {
                  "text": "extend to the last displayed line",
                  "command": "dance.goto.lastVisibleLine.extend"
                },
                "f": {
                  "text": "extend to file whose name is selected",
                  "command": "dance.goto.selectedFile.extend"
                },
                ".": {
                  "text": "extend to last buffer modification position",
                  "command": "dance.goto.lastModification.extend"
                }
              }
            }
          }
        }
      }
    },
    "commands": [
      {
        "command": "dance.edit.align",
        "title": "Align selections",
        "category": "Dance"
      },
      {
        "command": "dance.edit.case.swap",
        "title": "Swap case",
        "category": "Dance"
      },
      {
        "command": "dance.edit.case.toLower",
        "title": "Transform to lower case",
        "category": "Dance"
      },
      {
        "command": "dance.edit.case.toUpper",
        "title": "Transform to upper case",
        "category": "Dance"
      },
      {
        "command": "dance.edit.copyIndentation",
        "title": "Copy indentation",
        "category": "Dance"
      },
      {
        "command": "dance.edit.deindent",
        "title": "Deindent selected lines",
        "category": "Dance"
      },
      {
        "command": "dance.edit.deindent.withIncomplete",
        "title": "Deindent selected lines (including incomplete indent)",
        "category": "Dance"
      },
      {
        "command": "dance.edit.indent",
        "title": "Indent selected lines",
        "category": "Dance"
      },
      {
        "command": "dance.edit.indent.withEmpty",
        "title": "Indent selected lines (including empty lines)",
        "category": "Dance"
      },
      {
        "command": "dance.edit.insert",
        "title": "Insert contents of register",
        "category": "Dance"
      },
      {
        "command": "dance.edit.join",
        "title": "Join lines",
        "category": "Dance"
      },
      {
        "command": "dance.edit.join.select",
        "title": "Join lines and select inserted separators",
        "category": "Dance"
      },
      {
        "command": "dance.edit.newLine.above",
        "title": "Insert new line above each selection",
        "category": "Dance"
      },
      {
        "command": "dance.edit.newLine.below",
        "title": "Insert new line below each selection",
        "category": "Dance"
      },
      {
        "command": "dance.edit.replaceCharacters",
        "title": "Replace characters",
        "category": "Dance"
      },
      {
        "command": "edit.delete",
        "title": "Delete",
        "category": "Dance"
      },
      {
        "command": "edit.delete-insert",
        "title": "Delete and switch to Insert",
        "category": "Dance"
      },
      {
        "command": "edit.newLine.above.insert",
        "title": "Insert new line above and switch to insert",
        "category": "Dance"
      },
      {
        "command": "edit.newLine.below.insert",
        "title": "Insert new line below and switch to insert",
        "category": "Dance"
      },
      {
        "command": "edit.paste.after",
        "title": "Paste after",
        "category": "Dance"
      },
      {
        "command": "edit.paste.after.select",
        "title": "Paste after and select",
        "category": "Dance"
      },
      {
        "command": "edit.paste.before",
        "title": "Paste before",
        "category": "Dance"
      },
      {
        "command": "edit.paste.before.select",
        "title": "Paste before and select",
        "category": "Dance"
      },
      {
        "command": "edit.selectRegister-insert",
        "title": "Pick register and replace",
        "category": "Dance"
      },
      {
        "command": "edit.yank-delete",
        "title": "Copy and delete",
        "category": "Dance"
      },
      {
        "command": "edit.yank-delete-insert",
        "title": "Copy, delete and switch to Insert",
        "category": "Dance"
      },
      {
        "command": "edit.yank-replace",
        "title": "Copy and replace",
        "category": "Dance"
      },
      {
        "command": "dance.history.recording.play",
        "title": "Play macro",
        "category": "Dance"
      },
      {
        "command": "dance.history.recording.start",
        "title": "Start recording macro",
        "category": "Dance"
      },
      {
        "command": "dance.history.recording.stop",
        "title": "Stop recording macro",
        "category": "Dance"
      },
      {
        "command": "dance.history.repeat",
        "title": "Repeat last change",
        "category": "Dance"
      },
      {
        "command": "dance.history.repeat.edit",
        "title": "Repeat last edit without a command",
        "category": "Dance"
      },
      {
        "command": "history.repeat.objectSelection",
        "title": "Repeat last object selection",
        "category": "Dance"
      },
      {
        "command": "history.repeat.selection",
        "title": "Repeat last selection change",
        "category": "Dance"
      },
      {
        "command": "dance.menus.open",
        "title": "Open menu",
        "category": "Dance"
      },
      {
        "command": "dance.run",
        "title": "Run code",
        "category": "Dance"
      },
      {
        "command": "dance.selectRegister",
        "title": "Select register for next command",
        "category": "Dance"
      },
      {
        "command": "dance.toggle",
        "title": "Toggle default key bindings",
        "category": "Dance"
      },
      {
        "command": "dance.updateCount",
        "title": "Update Dance count",
        "category": "Dance"
      },
      {
        "command": "dance.modes.set",
        "title": "Set Dance mode",
        "category": "Dance"
      },
      {
        "command": "dance.modes.set.temporarily",
        "title": "Set Dance mode temporarily",
        "category": "Dance"
      },
      {
        "command": "modes.set.insert",
        "title": "Set mode to Insert",
        "category": "Dance"
      },
      {
        "command": "modes.set.normal",
        "title": "Set mode to Normal",
        "category": "Dance"
      },
      {
        "command": "modes.set.temporarily.insert",
        "title": "Temporart Insert mode",
        "category": "Dance"
      },
      {
        "command": "modes.set.temporarily.normal",
        "title": "Temporary Normal mode",
        "category": "Dance"
      },
      {
        "command": "dance.search.",
        "title": "Search",
        "category": "Dance"
      },
      {
        "command": "dance.search.next",
        "title": "Select next match",
        "category": "Dance"
      },
      {
        "command": "dance.search.selection",
        "title": "Search current selection",
        "category": "Dance"
      },
      {
        "command": "search.add",
        "title": "Search (add)",
        "category": "Dance"
      },
      {
        "command": "search.backward",
        "title": "Search backward",
        "category": "Dance"
      },
      {
        "command": "search.backward.add",
        "title": "Search backward (add)",
        "category": "Dance"
      },
      {
        "command": "search.next.add",
        "title": "Add next match",
        "category": "Dance"
      },
      {
        "command": "search.previous",
        "title": "Select previous match",
        "category": "Dance"
      },
      {
        "command": "search.previous.add",
        "title": "Add previous match",
        "category": "Dance"
      },
      {
        "command": "search.selection.smart",
        "title": "Search current selection (smart)",
        "category": "Dance"
      },
      {
        "command": "dance.seek.character",
        "title": "Select to character (excluded)",
        "category": "Dance"
      },
      {
        "command": "dance.seek.wordEnd",
        "title": "Select to next word end",
        "category": "Dance"
      },
      {
        "command": "dance.seek.wordStart",
        "title": "Select to next word start",
        "category": "Dance"
      },
      {
        "command": "seek.character.backward",
        "title": "Select to character (excluded, backward)",
        "category": "Dance"
      },
      {
        "command": "seek.character.extend",
        "title": "Extend to character (excluded)",
        "category": "Dance"
      },
      {
        "command": "seek.character.extend.backward",
        "title": "Extend to character (excluded, backward)",
        "category": "Dance"
      },
      {
        "command": "seek.character.included",
        "title": "Select to character (included)",
        "category": "Dance"
      },
      {
        "command": "seek.character.included.backward",
        "title": "Select to character (included, backward)",
        "category": "Dance"
      },
      {
        "command": "seek.character.included.extend",
        "title": "Extend to character (included)",
        "category": "Dance"
      },
      {
        "command": "seek.character.included.extend.backward",
        "title": "Extend to character (included, backward)",
        "category": "Dance"
      },
      {
        "command": "seek.wordEnd.extend",
        "title": "Extend to next word end",
        "category": "Dance"
      },
      {
        "command": "seek.wordEnd.ws",
        "title": "Select to next non-whitespace word end",
        "category": "Dance"
      },
      {
        "command": "seek.wordEnd.ws.extend",
        "title": "Extend to next non-whitespace word end",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.backward",
        "title": "Select to previous word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.extend",
        "title": "Extend to next word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.extend.backward",
        "title": "Extend to previous word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.ws",
        "title": "Select to next non-whitespace word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.ws.backward",
        "title": "Select to previous non-whitespace word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.ws.extend",
        "title": "Extend to next non-whitespace word start",
        "category": "Dance"
      },
      {
        "command": "seek.wordStart.ws.extend.backward",
        "title": "Extend to previous non-whitespace word start",
        "category": "Dance"
      },
      {
        "command": "dance.select.buffer",
        "title": "Select whole buffer",
        "category": "Dance"
      },
      {
        "command": "dance.select.line",
        "title": "Select line",
        "category": "Dance"
      },
      {
        "command": "dance.select.line.extend",
        "title": "Extend line",
        "category": "Dance"
      },
      {
        "command": "dance.select.toLine",
        "title": "Select to line",
        "category": "Dance"
      },
      {
        "command": "dance.select.toLineEnd",
        "title": "Select to line end",
        "category": "Dance"
      },
      {
        "command": "dance.select.toLineStart",
        "title": "Select to line start",
        "category": "Dance"
      },
      {
        "command": "select.toLineEnd.extend",
        "title": "Extend to line end",
        "category": "Dance"
      },
      {
        "command": "select.toLineStart.extend",
        "title": "Extend to line start",
        "category": "Dance"
      },
      {
        "command": "dance.selections.extendToLines",
        "title": "Extend to lines",
        "category": "Dance"
      },
      {
        "command": "dance.selections.filter",
        "title": "Filter selections",
        "category": "Dance"
      },
      {
        "command": "dance.selections.pipe",
        "title": "Pipe selections",
        "category": "Dance"
      },
      {
        "command": "dance.selections.restore",
        "title": "Restore selections",
        "category": "Dance"
      },
      {
        "command": "dance.selections.restore.withCurrent",
        "title": "Combine register selections with current ones",
        "category": "Dance"
      },
      {
        "command": "dance.selections.save",
        "title": "Save selections",
        "category": "Dance"
      },
      {
        "command": "dance.selections.saveText",
        "title": "Copy selections text",
        "category": "Dance"
      },
      {
        "command": "dance.selections.split",
        "title": "Split selections",
        "category": "Dance"
      },
      {
        "command": "dance.selections.splitLines",
        "title": "Split selections at line boundaries",
        "category": "Dance"
      },
      {
        "command": "dance.selections.trimLines",
        "title": "Trim lines",
        "category": "Dance"
      },
      {
        "command": "dance.selections.trimWhitespace",
        "title": "Trim whitespace",
        "category": "Dance"
      },
      {
        "command": "selections.filter.regexp",
        "title": "Filter with RegExp",
        "category": "Dance"
      },
      {
        "command": "selections.pipe.append",
        "title": "Pipe and append",
        "category": "Dance"
      },
      {
        "command": "selections.pipe.prepend",
        "title": "Pipe and prepend",
        "category": "Dance"
      },
      {
        "command": "selections.pipe.replace",
        "title": "Pipe and replace",
        "category": "Dance"
      },
      {
        "command": "dance.selections.rotate.both",
        "title": "Rotate selections clockwise",
        "category": "Dance"
      },
      {
        "command": "dance.selections.rotate.contents",
        "title": "Rotate selections clockwise (contents only)",
        "category": "Dance"
      },
      {
        "command": "dance.selections.rotate.selections",
        "title": "Rotate selections clockwise (selections only)",
        "category": "Dance"
      },
      {
        "command": "selections.rotate.both.reverse",
        "title": "Rotate selections counter-clockwise",
        "category": "Dance"
      },
      {
        "command": "selections.rotate.contents.reverse",
        "title": "Rotate selections counter-clockwise (contents only)",
        "category": "Dance"
      },
      {
        "command": "selections.rotate.selections.reverse",
        "title": "Rotate selections counter-clockwise (selections only)",
        "category": "Dance"
      }
    ],
    "keybindings": [
      {
        "key": "Shift+7",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Align selections",
        "command": "dance.edit.align"
      },
      {
        "key": "Alt+`",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Swap case",
        "command": "dance.edit.case.swap"
      },
      {
        "key": "`",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Transform to lower case",
        "command": "dance.edit.case.toLower"
      },
      {
        "key": "Shift+`",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Transform to upper case",
        "command": "dance.edit.case.toUpper"
      },
      {
        "key": "Shift+Alt+7",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Copy indentation",
        "command": "dance.edit.copyIndentation"
      },
      {
        "key": "Shift+Alt+,",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Deindent selected lines",
        "command": "dance.edit.deindent"
      },
      {
        "key": "Shift+,",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Deindent selected lines (including incomplete indent)",
        "command": "dance.edit.deindent.withIncomplete"
      },
      {
        "key": "Shift+.",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Indent selected lines",
        "command": "dance.edit.indent"
      },
      {
        "key": "Shift+Alt+.",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Indent selected lines (including empty lines)",
        "command": "dance.edit.indent.withEmpty"
      },
      {
        "key": "Shift+Alt+R",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Insert contents of register",
        "command": "dance.edit.insert"
      },
      {
        "key": "Alt+J",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Join lines",
        "command": "dance.edit.join"
      },
      {
        "key": "Shift+Alt+J",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Join lines and select inserted separators",
        "command": "dance.edit.join.select"
      },
      {
        "key": "Shift+Alt+O",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Insert new line above each selection",
        "command": "dance.edit.newLine.above"
      },
      {
        "key": "Alt+O",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Insert new line below each selection",
        "command": "dance.edit.newLine.below"
      },
      {
        "key": "R",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Replace characters",
        "command": "dance.edit.replaceCharacters"
      },
      {
        "key": "Ctrl+R",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Pick register and replace",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selectRegister"
            ],
            [
              ".edit.insert"
            ]
          ]
        }
      },
      {
        "key": "Ctrl+R",
        "when": "editorTextFocus && dance.mode == 'insert'",
        "title": "Pick register and replace",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selectRegister"
            ],
            [
              ".edit.insert"
            ]
          ]
        }
      },
      {
        "key": "Shift+P",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Paste before",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "where": "before"
              }
            ]
          ]
        }
      },
      {
        "key": "P",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Paste after",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "where": "after"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+P",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Paste before and select",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "where": "before",
                "select": true
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+P",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Paste after and select",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "where": "after",
                "select": true
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+D",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Delete",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "register": "_"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+C",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Delete and switch to Insert",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".edit.insert",
              {
                "register": "_"
              }
            ],
            [
              ".modes.set",
              {
                "input": "insert"
              }
            ]
          ]
        }
      },
      {
        "key": "D",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Copy and delete",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.saveText"
            ],
            [
              ".edit.insert",
              {
                "register": "_"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+R",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Copy and replace",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.saveText"
            ],
            [
              ".edit.insert"
            ]
          ]
        }
      },
      {
        "key": "C",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Copy, delete and switch to Insert",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.saveText"
            ],
            [
              ".edit.insert",
              {
                "register": "_"
              }
            ],
            [
              ".modes.set",
              {
                "input": "insert"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+O",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Insert new line above and switch to insert",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".newLine.above",
              {
                "select": true
              }
            ],
            [
              ".modes.set",
              {
                "input": "insert"
              }
            ]
          ]
        }
      },
      {
        "key": "O",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Insert new line below and switch to insert",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".newLine.below",
              {
                "select": true
              }
            ],
            [
              ".modes.set",
              {
                "input": "insert"
              }
            ]
          ]
        }
      },
      {
        "key": "Q",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Play macro",
        "command": "dance.history.recording.play"
      },
      {
        "key": "Shift+Q",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Start recording macro",
        "command": "dance.history.recording.start"
      },
      {
        "key": "Escape",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Stop recording macro",
        "command": "dance.history.recording.stop"
      },
      {
        "key": ".",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Repeat last edit without a command",
        "command": "dance.history.repeat.edit"
      },
      {
        "key": "Alt+.",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Repeat last object selection",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".history.repeat",
              {
                "include": "dance.selections.object.+"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+;",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              "workbench.action.showCommands"
            ]
          ]
        }
      },
      {
        "key": "0",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 0 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 0
              }
            ]
          ]
        }
      },
      {
        "key": "1",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 1 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 1
              }
            ]
          ]
        }
      },
      {
        "key": "2",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 2 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 2
              }
            ]
          ]
        }
      },
      {
        "key": "3",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 3 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 3
              }
            ]
          ]
        }
      },
      {
        "key": "4",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 4 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 4
              }
            ]
          ]
        }
      },
      {
        "key": "5",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 5 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 5
              }
            ]
          ]
        }
      },
      {
        "key": "6",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 6 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 6
              }
            ]
          ]
        }
      },
      {
        "key": "7",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 7 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 7
              }
            ]
          ]
        }
      },
      {
        "key": "8",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 8 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 8
              }
            ]
          ]
        }
      },
      {
        "key": "9",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add the digit 9 to the counter",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".updateCount",
              {
                "addDigits": 9
              }
            ]
          ]
        }
      },
      {
        "key": "\"",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select register for next command",
        "command": "dance.selectRegister"
      },
      {
        "key": "Escape",
        "when": "editorTextFocus && dance.mode == 'insert'",
        "title": "Set mode to Normal",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".modes.set",
              {
                "input": "normal"
              }
            ]
          ]
        }
      },
      {
        "key": "Ctrl+V",
        "when": "editorTextFocus && dance.mode == 'insert'",
        "title": "Temporary Normal mode",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".modes.set.temporarily",
              {
                "input": "normal"
              }
            ]
          ]
        }
      },
      {
        "key": "Ctrl+V",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Temporart Insert mode",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".modes.set.temporarily",
              {
                "input": "insert"
              }
            ]
          ]
        }
      },
      {
        "key": "?",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search (add)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search",
              {
                "add": true
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+/",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search backward",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search",
              {
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+?",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search backward (add)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search",
              {
                "direction": -1,
                "add": true
              }
            ]
          ]
        }
      },
      {
        "key": "*",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search current selection (smart)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search.selection",
              {
                "smart": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+N",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add next match",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search.next",
              {
                "add": true
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+N",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select previous match",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search",
              {
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+N",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Add previous match",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".search",
              {
                "direction": -1,
                "add": true
              }
            ]
          ]
        }
      },
      {
        "key": "/",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search",
        "command": "dance.search."
      },
      {
        "key": "N",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select next match",
        "command": "dance.search.next"
      },
      {
        "key": "Alt+*",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Search current selection",
        "command": "dance.search.selection"
      },
      {
        "key": "Shift+T",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to character (excluded)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+T",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to character (excluded, backward)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+T",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to character (excluded, backward)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "shift": "extend",
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "F",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to character (included)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "include": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+F",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to character (included)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "include": true,
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+F",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to character (included, backward)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "include": true,
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+F",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to character (included, backward)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.character",
              {
                "include": true,
                "shift": "extend",
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+W",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to next word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "B",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to previous word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+B",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to previous word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "shift": "extend",
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+W",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to next non-whitespace word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "ws": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+W",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to next non-whitespace word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "ws": true,
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+B",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to previous non-whitespace word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "ws": true,
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+B",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to previous non-whitespace word start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordStart",
              {
                "ws": true,
                "shift": "extend",
                "direction": -1
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+E",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to next word end",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordEnd",
              {
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+E",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to next non-whitespace word end",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordEnd",
              {
                "ws": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+E",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to next non-whitespace word end",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".seek.wordEnd",
              {
                "ws": true,
                "shift": "extend"
              }
            ]
          ]
        }
      },
      {
        "key": "T",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to character (excluded)",
        "command": "dance.seek.character"
      },
      {
        "key": "E",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to next word end",
        "command": "dance.seek.wordEnd"
      },
      {
        "key": "W",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to next word start",
        "command": "dance.seek.wordStart"
      },
      {
        "key": "Shift+Alt+H",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to line start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".select.toLineStart",
              {
                "extend": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Home",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to line start",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".select.toLineStart",
              {
                "extend": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+L",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to line end",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".select.toLineEnd",
              {
                "extend": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+End",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to line end",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".select.toLineEnd",
              {
                "extend": true
              }
            ]
          ]
        }
      },
      {
        "key": "%",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select whole buffer",
        "command": "dance.select.buffer"
      },
      {
        "key": "G",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to line",
        "command": "dance.select.toLine"
      },
      {
        "key": "Alt+L",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to line end",
        "command": "dance.select.toLineEnd"
      },
      {
        "key": "End",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to line end",
        "command": "dance.select.toLineEnd"
      },
      {
        "key": "Alt+H",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to line start",
        "command": "dance.select.toLineStart"
      },
      {
        "key": "Home",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Select to line start",
        "command": "dance.select.toLineStart"
      },
      {
        "key": "Shift+Alt+Z",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.restore.withCurrent",
              {
                "reverse": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+\\",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Pipe and replace",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.pipe"
            ],
            [
              ".edit.insert",
              {
                "register": "|"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+1",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Pipe and append",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.pipe"
            ],
            [
              ".edit.insert",
              {
                "register": "|",
                "where": "end"
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+1",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Pipe and prepend",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.pipe"
            ],
            [
              ".edit.insert",
              {
                "register": "|",
                "where": "start"
              }
            ]
          ]
        }
      },
      {
        "key": "S",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Filter with RegExp",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.filter",
              {
                "defaultInput": "/"
              }
            ]
          ]
        }
      },
      {
        "key": "Alt+X",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Extend to lines",
        "command": "dance.selections.extendToLines"
      },
      {
        "key": "Shift+4",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Filter selections",
        "command": "dance.selections.filter"
      },
      {
        "key": "Shift+Alt+\\",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Pipe selections",
        "command": "dance.selections.pipe"
      },
      {
        "key": "Z",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Restore selections",
        "command": "dance.selections.restore"
      },
      {
        "key": "Alt+Z",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Combine register selections with current ones",
        "command": "dance.selections.restore.withCurrent"
      },
      {
        "key": "Shift+Z",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Save selections",
        "command": "dance.selections.save"
      },
      {
        "key": "Y",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Copy selections text",
        "command": "dance.selections.saveText"
      },
      {
        "key": "Shift+S",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Split selections",
        "command": "dance.selections.split"
      },
      {
        "key": "Alt+S",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Split selections at line boundaries",
        "command": "dance.selections.splitLines"
      },
      {
        "key": "Shift+Alt+X",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Trim lines",
        "command": "dance.selections.trimLines"
      },
      {
        "key": "Shift+-",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Trim whitespace",
        "command": "dance.selections.trimWhitespace"
      },
      {
        "key": "Shift+0",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Rotate selections counter-clockwise",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.rotate",
              {
                "reverse": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+Alt+0",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Rotate selections counter-clockwise (selections only)",
        "command": "dance.run",
        "args": {
          "commands": [
            [
              ".selections.rotate.selections",
              {
                "reverse": true
              }
            ]
          ]
        }
      },
      {
        "key": "Shift+9",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Rotate selections clockwise",
        "command": "dance.selections.rotate.both"
      },
      {
        "key": "Shift+Alt+9",
        "when": "editorTextFocus && dance.mode == 'normal'",
        "title": "Rotate selections clockwise (selections only)",
        "command": "dance.selections.rotate.selections"
      },
      {
        "command": "dance.cancel",
        "key": "a",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "b",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "c",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "d",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "e",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "f",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "g",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "h",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "i",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "j",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "k",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "l",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "m",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "n",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "o",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "p",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "q",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "r",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "s",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "t",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "u",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "v",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "w",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "x",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "y",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "z",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+a",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+b",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+c",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+d",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+e",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+f",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+g",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+h",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+i",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+j",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+k",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+l",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+m",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+n",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+o",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+p",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+q",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+r",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+s",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+t",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+u",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+v",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+w",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+x",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+y",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+z",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+2",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+3",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+5",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+6",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "Shift+8",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": ",",
        "when": "editorTextFocus && dance.mode == 'normal'"
      },
      {
        "command": "dance.cancel",
        "key": "'",
        "when": "editorTextFocus && dance.mode == 'normal'"
      }
    ]
  }
}
