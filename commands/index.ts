// Auto-generated by commands/generate.ts. Do not edit manually.

/** A provided command. */
export interface ICommand {
  readonly id: string
  readonly title: string
  readonly description: string
  readonly keybindings: { key: string, when: string }[]
}

/** Toggles Dance key bindings. */
export const toggle: ICommand & { readonly id: 'dance.toggle' } = {
  id         : 'dance.toggle',
  title      : 'Toggle',
  description: 'Toggles Dance key bindings.',
  keybindings: [],
}
/** Set Dance mode to Normal. */
export const setNormal: ICommand & { readonly id: 'dance.set.normal' } = {
  id         : 'dance.set.normal',
  title      : 'Set mode to Normal',
  description: 'Set Dance mode to Normal.',
  keybindings: [
    { key: 'escape', when: 'editorTextFocus && dance.mode == \'insert\'' },
  ],
}
/** Set Dance mode to Insert. */
export const setInsert: ICommand & { readonly id: 'dance.set.insert' } = {
  id         : 'dance.set.insert',
  title      : 'Set mode to Insert',
  description: 'Set Dance mode to Insert.',
  keybindings: [],
}
/** Switches to normal mode temporarily. */
export const tmpNormal: ICommand & { readonly id: 'dance.tmp.normal' } = {
  id         : 'dance.tmp.normal',
  title      : 'Temporary normal mode',
  description: 'Switches to normal mode temporarily.',
  keybindings: [
    { key: 'Ctrl+v', when: 'editorTextFocus && dance.mode == \'insert\'' },
  ],
}
/** Switches to insert mode temporarily. */
export const tmpInsert: ICommand & { readonly id: 'dance.tmp.insert' } = {
  id         : 'dance.tmp.insert',
  title      : 'Temporary insert mode',
  description: 'Switches to insert mode temporarily.',
  keybindings: [
    { key: 'Ctrl+v', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Start insert before the current selections. */
export const insertBefore: ICommand & { readonly id: 'dance.insert.before' } = {
  id         : 'dance.insert.before',
  title      : 'Insert before',
  description: 'Start insert before the current selections.',
  keybindings: [
    { key: 'i', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Start insert after the current selections. */
export const insertAfter: ICommand & { readonly id: 'dance.insert.after' } = {
  id         : 'dance.insert.after',
  title      : 'Insert after',
  description: 'Start insert after the current selections.',
  keybindings: [
    { key: 'a', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Start insert at line start of each selection. */
export const insertLineStart: ICommand & { readonly id: 'dance.insert.lineStart' } = {
  id         : 'dance.insert.lineStart',
  title      : 'Insert at line start',
  description: 'Start insert at line start of each selection.',
  keybindings: [
    { key: 'Shift+i', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Start insert at line end of each selection. */
export const insertLineEnd: ICommand & { readonly id: 'dance.insert.lineEnd' } = {
  id         : 'dance.insert.lineEnd',
  title      : 'Insert at line end',
  description: 'Start insert at line end of each selection.',
  keybindings: [
    { key: 'Shift+a', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Create new line and start insert below. */
export const insertNewLineBelow: ICommand & { readonly id: 'dance.insert.newLine.below' } = {
  id         : 'dance.insert.newLine.below',
  title      : 'Insert new line below',
  description: 'Create new line and start insert below.',
  keybindings: [
    { key: 'o', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Create new line and start insert above. */
export const insertNewLineAbove: ICommand & { readonly id: 'dance.insert.newLine.above' } = {
  id         : 'dance.insert.newLine.above',
  title      : 'Insert new line above',
  description: 'Create new line and start insert above.',
  keybindings: [
    { key: 'Shift+o', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Add a new line below, without entering insert mode. */
export const newLineBelow: ICommand & { readonly id: 'dance.newLine.below' } = {
  id         : 'dance.newLine.below',
  title      : 'Add new line below',
  description: 'Add a new line below, without entering insert mode.',
  keybindings: [],
}
/** Add a new line above, without entering insert mode. */
export const newLineAbove: ICommand & { readonly id: 'dance.newLine.above' } = {
  id         : 'dance.newLine.above',
  title      : 'Add new line above',
  description: 'Add a new line above, without entering insert mode.',
  keybindings: [],
}
/** Move left. */
export const left: ICommand & { readonly id: 'dance.left' } = {
  id         : 'dance.left',
  title      : 'Move left',
  description: 'Move left.',
  keybindings: [
    { key: 'left', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'left', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'h', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move right. */
export const right: ICommand & { readonly id: 'dance.right' } = {
  id         : 'dance.right',
  title      : 'Move right',
  description: 'Move right.',
  keybindings: [
    { key: 'right', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'right', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'l', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move up. */
export const up: ICommand & { readonly id: 'dance.up' } = {
  id         : 'dance.up',
  title      : 'Move up',
  description: 'Move up.',
  keybindings: [
    { key: 'up', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'up', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'k', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move down. */
export const down: ICommand & { readonly id: 'dance.down' } = {
  id         : 'dance.down',
  title      : 'Move down',
  description: 'Move down.',
  keybindings: [
    { key: 'down', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'down', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'j', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select to the next character pressed, including it. */
export const selectToIncluded: ICommand & { readonly id: 'dance.select.to.included' } = {
  id         : 'dance.select.to.included',
  title      : 'Select to',
  description: 'Select to the next character pressed, including it.',
  keybindings: [
    { key: 'f', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select until the next character pressed, excluding it. */
export const selectToExcluded: ICommand & { readonly id: 'dance.select.to.excluded' } = {
  id         : 'dance.select.to.excluded',
  title      : 'Select until',
  description: 'Select until the next character pressed, excluding it.',
  keybindings: [
    { key: 't', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select whole buffer. */
export const selectBuffer: ICommand & { readonly id: 'dance.select.buffer' } = {
  id         : 'dance.select.buffer',
  title      : 'Select whole buffer',
  description: 'Select whole buffer.',
  keybindings: [
    { key: 'Shift+5', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select line on which the end of each selection lies (or next line when end lies on an end-of-line). */
export const selectLine: ICommand & { readonly id: 'dance.select.line' } = {
  id         : 'dance.select.line',
  title      : 'Select line',
  description: 'Select line on which the end of each selection lies (or next line when end lies on an end-of-line).',
  keybindings: [
    { key: 'x', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend selections to contain full lines (including end-of-lines). */
export const expandLines: ICommand & { readonly id: 'dance.expandLines' } = {
  id         : 'dance.expandLines',
  title      : 'Extend lines',
  description: 'Extend selections to contain full lines (including end-of-lines).',
  keybindings: [
    { key: 'Alt+x', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Trim selections to only contain full lines (not including last end-of-line). */
export const trimLines: ICommand & { readonly id: 'dance.trimLines' } = {
  id         : 'dance.trimLines',
  title      : 'Trim lines',
  description: 'Trim selections to only contain full lines (not including last end-of-line).',
  keybindings: [
    { key: 'Shift+Alt+x', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select the word and following whitespaces on the right of the end of each selection. */
export const selectWord: ICommand & { readonly id: 'dance.select.word' } = {
  id         : 'dance.select.word',
  title      : 'Select to next word start',
  description: 'Select the word and following whitespaces on the right of the end of each selection.',
  keybindings: [
    { key: 'w', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select preceding whitespaces and the word on the left of the end of each selection. */
export const selectWordPrevious: ICommand & { readonly id: 'dance.select.word.previous' } = {
  id         : 'dance.select.word.previous',
  title      : 'Select to previous word start',
  description: 'Select preceding whitespaces and the word on the left of the end of each selection.',
  keybindings: [
    { key: 'b', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select preceding whitespaces and the word on the right of the end of each selection. */
export const selectWordEnd: ICommand & { readonly id: 'dance.select.word.end' } = {
  id         : 'dance.select.word.end',
  title      : 'Select to next word end',
  description: 'Select preceding whitespaces and the word on the right of the end of each selection.',
  keybindings: [
    { key: 'e', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select the non-whitespace word and following whitespaces on the right of the end of each selection. */
export const selectWordAlt: ICommand & { readonly id: 'dance.select.word.alt' } = {
  id         : 'dance.select.word.alt',
  title      : 'Select to next non-whitespace word start',
  description: 'Select the non-whitespace word and following whitespaces on the right of the end of each selection.',
  keybindings: [
    { key: 'Alt+w', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
export const selectWordAltPrevious: ICommand & { readonly id: 'dance.select.word.alt.previous' } = {
  id         : 'dance.select.word.alt.previous',
  title      : 'Select to previous non-whitespace word start',
  description: 'Select preceding whitespaces and the non-whitespace word on the left of the end of each selection.',
  keybindings: [
    { key: 'Alt+b', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
export const selectWordAltEnd: ICommand & { readonly id: 'dance.select.word.alt.end' } = {
  id         : 'dance.select.word.alt.end',
  title      : 'Select to next non-whitespace word end',
  description: 'Select preceding whitespaces and the non-whitespace word on the right of the end of each selection.',
  keybindings: [
    { key: 'Alt+e', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select within current selections according to a RegExp. */
export const select: ICommand & { readonly id: 'dance.select' } = {
  id         : 'dance.select',
  title      : 'Select',
  description: 'Select within current selections according to a RegExp.',
  keybindings: [
    { key: 's', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Split within current selections according to a RegExp. */
export const split: ICommand & { readonly id: 'dance.split' } = {
  id         : 'dance.split',
  title      : 'Split',
  description: 'Split within current selections according to a RegExp.',
  keybindings: [
    { key: 'Shift+s', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Split selections into lines. */
export const splitLines: ICommand & { readonly id: 'dance.split.lines' } = {
  id         : 'dance.split.lines',
  title      : 'Split lines',
  description: 'Split selections into lines.',
  keybindings: [
    { key: 'Alt+s', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select first and last characters of each selection. */
export const selectFirstLast: ICommand & { readonly id: 'dance.select.firstLast' } = {
  id         : 'dance.select.firstLast',
  title      : 'Select first and last characters',
  description: 'Select first and last characters of each selection.',
  keybindings: [
    { key: 'Shift+Alt+s', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Clear selections (except main) */
export const selectionsClear: ICommand & { readonly id: 'dance.selections.clear' } = {
  id         : 'dance.selections.clear',
  title      : 'Clear selections',
  description: 'Clear selections (except main)',
  keybindings: [
    { key: 'space', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Clear main selection. */
export const selectionsClearMain: ICommand & { readonly id: 'dance.selections.clearMain' } = {
  id         : 'dance.selections.clearMain',
  title      : 'Clear main selection',
  description: 'Clear main selection.',
  keybindings: [
    { key: 'Alt+space', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Keep selections that match a RegExp. */
export const selectionsKeepMatching: ICommand & { readonly id: 'dance.selections.keepMatching' } = {
  id         : 'dance.selections.keepMatching',
  title      : 'Keep matching selections',
  description: 'Keep selections that match a RegExp.',
  keybindings: [
    { key: 'Alt+k', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Clear selections that match a RegExp. */
export const selectionsClearMatching: ICommand & { readonly id: 'dance.selections.clearMatching' } = {
  id         : 'dance.selections.clearMatching',
  title      : 'Clear matching selections',
  description: 'Clear selections that match a RegExp.',
  keybindings: [
    { key: 'Shift+Alt+k', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Pipe each selection to a program, and keeps it if the program returns 0. */
export const pipeFilter: ICommand & { readonly id: 'dance.pipe.filter' } = {
  id         : 'dance.pipe.filter',
  title      : 'Filter through pipe',
  description: 'Pipe each selection to a program, and keeps it if the program returns 0.',
  keybindings: [
    { key: 'Shift+4', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Pipe each selection to a command, and replaces it with its output. */
export const pipeReplace: ICommand & { readonly id: 'dance.pipe.replace' } = {
  id         : 'dance.pipe.replace',
  title      : 'Pipe and replace',
  description: 'Pipe each selection to a command, and replaces it with its output.',
  keybindings: [
    { key: 'Shift+\\', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Pipe each selection to a command, ignoring their results. */
export const pipeIgnore: ICommand & { readonly id: 'dance.pipe.ignore' } = {
  id         : 'dance.pipe.ignore',
  title      : 'Pipe',
  description: 'Pipe each selection to a command, ignoring their results.',
  keybindings: [
    { key: 'Shift+Alt+\\', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Pipe each selection to a command, appending the output after the selection. */
export const pipeAppend: ICommand & { readonly id: 'dance.pipe.append' } = {
  id         : 'dance.pipe.append',
  title      : 'Pipe and append',
  description: 'Pipe each selection to a command, appending the output after the selection.',
  keybindings: [
    { key: 'Shift+1', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Pipe each selection to a command, prepending the output before the selection. */
export const pipePrepend: ICommand & { readonly id: 'dance.pipe.prepend' } = {
  id         : 'dance.pipe.prepend',
  title      : 'Pipe and prepend',
  description: 'Pipe each selection to a command, prepending the output before the selection.',
  keybindings: [
    { key: 'Shift+Alt+1', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Rotate each selection clockwise. */
export const rotate: ICommand & { readonly id: 'dance.rotate' } = {
  id         : 'dance.rotate',
  title      : 'Rotate',
  description: 'Rotate each selection clockwise.',
  keybindings: [
  ],
}
/** Rotate each selection counter-clockwise. */
export const rotateBackwards: ICommand & { readonly id: 'dance.rotate.backwards' } = {
  id         : 'dance.rotate.backwards',
  title      : 'Rotate backwards',
  description: 'Rotate each selection counter-clockwise.',
  keybindings: [],
}
/** Rotate content of each selection clockwise. */
export const rotateContent: ICommand & { readonly id: 'dance.rotate.content' } = {
  id         : 'dance.rotate.content',
  title      : 'Rotate content',
  description: 'Rotate content of each selection clockwise.',
  keybindings: [],
}
/** Rotate content of each selection counter-clockwise. */
export const rotateContentBackwards: ICommand & { readonly id: 'dance.rotate.content.backwards' } = {
  id         : 'dance.rotate.content.backwards',
  title      : 'Rotate content backwards',
  description: 'Rotate content of each selection counter-clockwise.',
  keybindings: [],
}
/** Search for the given input string. */
export const search: ICommand & { readonly id: 'dance.search' } = {
  id         : 'dance.search',
  title      : 'Search',
  description: 'Search for the given input string.',
  keybindings: [
    { key: 'slash', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Search for the given input string before the current selections. */
export const searchBackwards: ICommand & { readonly id: 'dance.search.backwards' } = {
  id         : 'dance.search.backwards',
  title      : 'Search backwards',
  description: 'Search for the given input string before the current selections.',
  keybindings: [
    { key: 'Alt+slash', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Search current selections (smart). */
export const searchSelectionSmart: ICommand & { readonly id: 'dance.search.selection.smart' } = {
  id         : 'dance.search.selection.smart',
  title      : 'Search current selections (smart)',
  description: 'Search current selections (smart).',
  keybindings: [
    { key: 'Shift+8', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Search current selections. */
export const searchSelection: ICommand & { readonly id: 'dance.search.selection' } = {
  id         : 'dance.search.selection',
  title      : 'Search current selections',
  description: 'Search current selections.',
  keybindings: [
    { key: 'Shift+Alt+8', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select whole object. */
export const objectsSelect: ICommand & { readonly id: 'dance.objects.select' } = {
  id         : 'dance.objects.select',
  title      : 'Select whole object',
  description: 'Select whole object.',
  keybindings: [
    { key: 'Alt+a', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'Alt+a', when: 'editorTextFocus && dance.mode == \'insert\'' },
  ],
}
/** Select inner object. */
export const objectsSelectInner: ICommand & { readonly id: 'dance.objects.select.inner' } = {
  id         : 'dance.objects.select.inner',
  title      : 'Select inner object',
  description: 'Select inner object.',
  keybindings: [
    { key: 'Alt+i', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'Alt+i', when: 'editorTextFocus && dance.mode == \'insert\'' },
  ],
}
/** Select to the whole object start. */
export const objectsSelectToStart: ICommand & { readonly id: 'dance.objects.selectToStart' } = {
  id         : 'dance.objects.selectToStart',
  title      : 'Select to the whole object start',
  description: 'Select to the whole object start.',
  keybindings: [
    { key: '[BracketLeft]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select to the whole object end. */
export const objectsSelectToEnd: ICommand & { readonly id: 'dance.objects.selectToEnd' } = {
  id         : 'dance.objects.selectToEnd',
  title      : 'Select to the whole object end',
  description: 'Select to the whole object end.',
  keybindings: [
    { key: '[BracketRight]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Repeat object select. */
export const objectsSelectRepeat: ICommand & { readonly id: 'dance.objects.select.repeat' } = {
  id         : 'dance.objects.select.repeat',
  title      : 'Repeat object select',
  description: 'Repeat object select.',
  keybindings: [
    { key: 'Alt+.', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Insert value in register. */
export const registersInsert: ICommand & { readonly id: 'dance.registers.insert' } = {
  id         : 'dance.registers.insert',
  title      : 'Insert value in register',
  description: 'Insert value in register.',
  keybindings: [
    { key: 'Ctrl+r', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'Ctrl+r', when: 'editorTextFocus && dance.mode == \'insert\'' },
  ],
}
/** Select register for next command. */
export const registersSelect: ICommand & { readonly id: 'dance.registers.select' } = {
  id         : 'dance.registers.select',
  title      : 'Select register for next command',
  description: 'Select register for next command.',
  keybindings: [
    { key: '[Quote]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Save selections. */
export const marksSaveSelections: ICommand & { readonly id: 'dance.marks.saveSelections' } = {
  id         : 'dance.marks.saveSelections',
  title      : 'Save selections',
  description: 'Save selections.',
  keybindings: [
    { key: 'Shift+z', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Restore selections. */
export const marksRestoreSelections: ICommand & { readonly id: 'dance.marks.restoreSelections' } = {
  id         : 'dance.marks.restoreSelections',
  title      : 'Restore selections',
  description: 'Restore selections.',
  keybindings: [
    { key: 'z', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Combine current selections with ones from register. */
export const marksCombineSelectionsFromCurrent: ICommand & { readonly id: 'dance.marks.combineSelections.fromCurrent' } = {
  id         : 'dance.marks.combineSelections.fromCurrent',
  title      : 'Combine current selections with ones from register',
  description: 'Combine current selections with ones from register.',
  keybindings: [
    { key: 'Shift+Alt+z', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Combine register selections with current ones. */
export const marksCombineSelectionsFromRegister: ICommand & { readonly id: 'dance.marks.combineSelections.fromRegister' } = {
  id         : 'dance.marks.combineSelections.fromRegister',
  title      : 'Combine register selections with current ones',
  description: 'Combine register selections with current ones.',
  keybindings: [
    { key: 'Alt+z', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move left (extend). */
export const leftExtend: ICommand & { readonly id: 'dance.left.extend' } = {
  id         : 'dance.left.extend',
  title      : 'Move left (extend)',
  description: 'Move left (extend).',
  keybindings: [
    { key: 'Shift+left', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'left', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'h', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move right (extend). */
export const rightExtend: ICommand & { readonly id: 'dance.right.extend' } = {
  id         : 'dance.right.extend',
  title      : 'Move right (extend)',
  description: 'Move right (extend).',
  keybindings: [
    { key: 'Shift+right', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'right', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'l', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move up (extend). */
export const upExtend: ICommand & { readonly id: 'dance.up.extend' } = {
  id         : 'dance.up.extend',
  title      : 'Move up (extend)',
  description: 'Move up (extend).',
  keybindings: [
    { key: 'Shift+up', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'up', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'k', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Move down (extend). */
export const downExtend: ICommand & { readonly id: 'dance.down.extend' } = {
  id         : 'dance.down.extend',
  title      : 'Move down (extend)',
  description: 'Move down (extend).',
  keybindings: [
    { key: 'Shift+down', when: 'editorTextFocus && dance.mode == \'normal\'' },
    { key: 'down', when: 'editorTextFocus && dance.mode == \'insert\'' },
    { key: 'j', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the next character pressed, including it. */
export const selectToIncludedExtend: ICommand & { readonly id: 'dance.select.to.included.extend' } = {
  id         : 'dance.select.to.included.extend',
  title      : 'Extend to',
  description: 'Extend to the next character pressed, including it.',
  keybindings: [
    { key: 'Shift+f', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with until the next character pressed, excluding it. */
export const selectToExcludedExtend: ICommand & { readonly id: 'dance.select.to.excluded.extend' } = {
  id         : 'dance.select.to.excluded.extend',
  title      : 'Extend until',
  description: 'Extend with until the next character pressed, excluding it.',
  keybindings: [
    { key: 'Shift+t', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with line on which the end of each selection lies (or next line when end lies on an end-of-line). */
export const selectLineExtend: ICommand & { readonly id: 'dance.select.line.extend' } = {
  id         : 'dance.select.line.extend',
  title      : 'Extend with line',
  description: 'Extend with line on which the end of each selection lies (or next line when end lies on an end-of-line).',
  keybindings: [
    { key: 'Shift+x', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with the word and following whitespaces on the right of the end of each selection. */
export const selectWordExtend: ICommand & { readonly id: 'dance.select.word.extend' } = {
  id         : 'dance.select.word.extend',
  title      : 'Extend to next word start',
  description: 'Extend with the word and following whitespaces on the right of the end of each selection.',
  keybindings: [
    { key: 'Shift+w', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with preceding whitespaces and the word on the left of the end of each selection. */
export const selectWordPreviousExtend: ICommand & { readonly id: 'dance.select.word.previous.extend' } = {
  id         : 'dance.select.word.previous.extend',
  title      : 'Extend to previous word start',
  description: 'Extend with preceding whitespaces and the word on the left of the end of each selection.',
  keybindings: [
    { key: 'Shift+b', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with preceding whitespaces and the word on the right of the end of each selection. */
export const selectWordEndExtend: ICommand & { readonly id: 'dance.select.word.end.extend' } = {
  id         : 'dance.select.word.end.extend',
  title      : 'Extend to next word end',
  description: 'Extend with preceding whitespaces and the word on the right of the end of each selection.',
  keybindings: [
    { key: 'Shift+e', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with the non-whitespace word and following whitespaces on the right of the end of each selection. */
export const selectWordAltExtend: ICommand & { readonly id: 'dance.select.word.alt.extend' } = {
  id         : 'dance.select.word.alt.extend',
  title      : 'Extend to next non-whitespace word start',
  description: 'Extend with the non-whitespace word and following whitespaces on the right of the end of each selection.',
  keybindings: [
    { key: 'Shift+Alt+w', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
export const selectWordAltPreviousExtend: ICommand & { readonly id: 'dance.select.word.alt.previous.extend' } = {
  id         : 'dance.select.word.alt.previous.extend',
  title      : 'Extend to previous non-whitespace word start',
  description: 'Extend with preceding whitespaces and the non-whitespace word on the left of the end of each selection.',
  keybindings: [
    { key: 'Shift+Alt+b', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
export const selectWordAltEndExtend: ICommand & { readonly id: 'dance.select.word.alt.end.extend' } = {
  id         : 'dance.select.word.alt.end.extend',
  title      : 'Extend to next non-whitespace word end',
  description: 'Extend with preceding whitespaces and the non-whitespace word on the right of the end of each selection.',
  keybindings: [
    { key: 'Shift+Alt+e', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Search for the given input string (extend). */
export const searchExtend: ICommand & { readonly id: 'dance.search.extend' } = {
  id         : 'dance.search.extend',
  title      : 'Search (extend)',
  description: 'Search for the given input string (extend).',
  keybindings: [
    { key: 'Shift+slash', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Search for the given input string before the current selections (extend). */
export const searchBackwardsExtend: ICommand & { readonly id: 'dance.search.backwards.extend' } = {
  id         : 'dance.search.backwards.extend',
  title      : 'Search backwards (extend)',
  description: 'Search for the given input string before the current selections (extend).',
  keybindings: [
    { key: 'Shift+Alt+slash', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the whole object start. */
export const objectsSelectToStartExtend: ICommand & { readonly id: 'dance.objects.selectToStart.extend' } = {
  id         : 'dance.objects.selectToStart.extend',
  title      : 'Extend to the whole object start',
  description: 'Extend to the whole object start.',
  keybindings: [
    { key: 'Shift+[BracketLeft]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the whole object end. */
export const objectsSelectToEndExtend: ICommand & { readonly id: 'dance.objects.selectToEnd.extend' } = {
  id         : 'dance.objects.selectToEnd.extend',
  title      : 'Extend to the whole object end',
  description: 'Extend to the whole object end.',
  keybindings: [
    { key: 'Shift+[BracketRight]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select to the next character pressed, including it. (backwards) */
export const selectToIncludedBackwards: ICommand & { readonly id: 'dance.select.to.included.backwards' } = {
  id         : 'dance.select.to.included.backwards',
  title      : 'Select to (backwards)',
  description: 'Select to the next character pressed, including it. (backwards)',
  keybindings: [
    { key: 'Alt+f', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select until the next character pressed, excluding it. (backwards) */
export const selectToExcludedBackwards: ICommand & { readonly id: 'dance.select.to.excluded.backwards' } = {
  id         : 'dance.select.to.excluded.backwards',
  title      : 'Select until (backwards)',
  description: 'Select until the next character pressed, excluding it. (backwards)',
  keybindings: [
    { key: 'Alt+t', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the next character pressed, including it. (backwards) */
export const selectToIncludedExtendBackwards: ICommand & { readonly id: 'dance.select.to.included.extend.backwards' } = {
  id         : 'dance.select.to.included.extend.backwards',
  title      : 'Extend to (backwards)',
  description: 'Extend to the next character pressed, including it. (backwards)',
  keybindings: [
    { key: 'Alt+Shift+f', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend with until the next character pressed, excluding it. (backwards) */
export const selectToExcludedExtendBackwards: ICommand & { readonly id: 'dance.select.to.excluded.extend.backwards' } = {
  id         : 'dance.select.to.excluded.extend.backwards',
  title      : 'Extend until (backwards)',
  description: 'Extend with until the next character pressed, excluding it. (backwards)',
  keybindings: [
    { key: 'Alt+Shift+t', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select to the inner object start. */
export const objectsSelectToStartInner: ICommand & { readonly id: 'dance.objects.selectToStart.inner' } = {
  id         : 'dance.objects.selectToStart.inner',
  title      : 'Select to the inner object start',
  description: 'Select to the inner object start.',
  keybindings: [
    { key: 'Alt+[BracketLeft]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Select to the inner object end. */
export const objectsSelectToEndInner: ICommand & { readonly id: 'dance.objects.selectToEnd.inner' } = {
  id         : 'dance.objects.selectToEnd.inner',
  title      : 'Select to the inner object end',
  description: 'Select to the inner object end.',
  keybindings: [
    { key: 'Alt+[BracketRight]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the inner object start. */
export const objectsSelectToStartExtendInner: ICommand & { readonly id: 'dance.objects.selectToStart.extend.inner' } = {
  id         : 'dance.objects.selectToStart.extend.inner',
  title      : 'Extend to the inner object start',
  description: 'Extend to the inner object start.',
  keybindings: [
    { key: 'Alt+Shift+[BracketLeft]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Extend to the inner object end. */
export const objectsSelectToEndExtendInner: ICommand & { readonly id: 'dance.objects.selectToEnd.extend.inner' } = {
  id         : 'dance.objects.selectToEnd.extend.inner',
  title      : 'Extend to the inner object end',
  description: 'Extend to the inner object end.',
  keybindings: [
    { key: 'Alt+Shift+[BracketRight]', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 0 to the current counter for the next operation. */
export const count0: ICommand & { readonly id: 'dance.count.0' } = {
  id         : 'dance.count.0',
  title      : 'Count 0',
  description: 'Adds 0 to the current counter for the next operation.',
  keybindings: [
    { key: '0', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 1 to the current counter for the next operation. */
export const count1: ICommand & { readonly id: 'dance.count.1' } = {
  id         : 'dance.count.1',
  title      : 'Count 1',
  description: 'Adds 1 to the current counter for the next operation.',
  keybindings: [
    { key: '1', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 2 to the current counter for the next operation. */
export const count2: ICommand & { readonly id: 'dance.count.2' } = {
  id         : 'dance.count.2',
  title      : 'Count 2',
  description: 'Adds 2 to the current counter for the next operation.',
  keybindings: [
    { key: '2', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 3 to the current counter for the next operation. */
export const count3: ICommand & { readonly id: 'dance.count.3' } = {
  id         : 'dance.count.3',
  title      : 'Count 3',
  description: 'Adds 3 to the current counter for the next operation.',
  keybindings: [
    { key: '3', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 4 to the current counter for the next operation. */
export const count4: ICommand & { readonly id: 'dance.count.4' } = {
  id         : 'dance.count.4',
  title      : 'Count 4',
  description: 'Adds 4 to the current counter for the next operation.',
  keybindings: [
    { key: '4', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 5 to the current counter for the next operation. */
export const count5: ICommand & { readonly id: 'dance.count.5' } = {
  id         : 'dance.count.5',
  title      : 'Count 5',
  description: 'Adds 5 to the current counter for the next operation.',
  keybindings: [
    { key: '5', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 6 to the current counter for the next operation. */
export const count6: ICommand & { readonly id: 'dance.count.6' } = {
  id         : 'dance.count.6',
  title      : 'Count 6',
  description: 'Adds 6 to the current counter for the next operation.',
  keybindings: [
    { key: '6', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 7 to the current counter for the next operation. */
export const count7: ICommand & { readonly id: 'dance.count.7' } = {
  id         : 'dance.count.7',
  title      : 'Count 7',
  description: 'Adds 7 to the current counter for the next operation.',
  keybindings: [
    { key: '7', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 8 to the current counter for the next operation. */
export const count8: ICommand & { readonly id: 'dance.count.8' } = {
  id         : 'dance.count.8',
  title      : 'Count 8',
  description: 'Adds 8 to the current counter for the next operation.',
  keybindings: [
    { key: '8', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}
/** Adds 9 to the current counter for the next operation. */
export const count9: ICommand & { readonly id: 'dance.count.9' } = {
  id         : 'dance.count.9',
  title      : 'Count 9',
  description: 'Adds 9 to the current counter for the next operation.',
  keybindings: [
    { key: '9', when: 'editorTextFocus && dance.mode == \'normal\'' },
  ],
}

/** All defined commands. */
export const commands = {
  /** Toggles Dance key bindings. */
  toggle,
  /** Set Dance mode to Normal. */
  setNormal,
  /** Set Dance mode to Insert. */
  setInsert,
  /** Switches to normal mode temporarily. */
  tmpNormal,
  /** Switches to insert mode temporarily. */
  tmpInsert,
  /** Start insert before the current selections. */
  insertBefore,
  /** Start insert after the current selections. */
  insertAfter,
  /** Start insert at line start of each selection. */
  insertLineStart,
  /** Start insert at line end of each selection. */
  insertLineEnd,
  /** Create new line and start insert below. */
  insertNewLineBelow,
  /** Create new line and start insert above. */
  insertNewLineAbove,
  /** Add a new line below, without entering insert mode. */
  newLineBelow,
  /** Add a new line above, without entering insert mode. */
  newLineAbove,
  /** Move left. */
  left,
  /** Move right. */
  right,
  /** Move up. */
  up,
  /** Move down. */
  down,
  /** Select to the next character pressed, including it. */
  selectToIncluded,
  /** Select until the next character pressed, excluding it. */
  selectToExcluded,
  /** Select whole buffer. */
  selectBuffer,
  /** Select line on which the end of each selection lies (or next line when end lies on an end-of-line). */
  selectLine,
  /** Extend selections to contain full lines (including end-of-lines). */
  expandLines,
  /** Trim selections to only contain full lines (not including last end-of-line). */
  trimLines,
  /** Select the word and following whitespaces on the right of the end of each selection. */
  selectWord,
  /** Select preceding whitespaces and the word on the left of the end of each selection. */
  selectWordPrevious,
  /** Select preceding whitespaces and the word on the right of the end of each selection. */
  selectWordEnd,
  /** Select the non-whitespace word and following whitespaces on the right of the end of each selection. */
  selectWordAlt,
  /** Select preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
  selectWordAltPrevious,
  /** Select preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
  selectWordAltEnd,
  /** Select within current selections according to a RegExp. */
  select,
  /** Split within current selections according to a RegExp. */
  split,
  /** Split selections into lines. */
  splitLines,
  /** Select first and last characters of each selection. */
  selectFirstLast,
  /** Clear selections (except main) */
  selectionsClear,
  /** Clear main selection. */
  selectionsClearMain,
  /** Keep selections that match a RegExp. */
  selectionsKeepMatching,
  /** Clear selections that match a RegExp. */
  selectionsClearMatching,
  /** Pipe each selection to a program, and keeps it if the program returns 0. */
  pipeFilter,
  /** Pipe each selection to a command, and replaces it with its output. */
  pipeReplace,
  /** Pipe each selection to a command, ignoring their results. */
  pipeIgnore,
  /** Pipe each selection to a command, appending the output after the selection. */
  pipeAppend,
  /** Pipe each selection to a command, prepending the output before the selection. */
  pipePrepend,
  /** Rotate each selection clockwise. */
  rotate,
  /** Rotate each selection counter-clockwise. */
  rotateBackwards,
  /** Rotate content of each selection clockwise. */
  rotateContent,
  /** Rotate content of each selection counter-clockwise. */
  rotateContentBackwards,
  /** Search for the given input string. */
  search,
  /** Search for the given input string before the current selections. */
  searchBackwards,
  /** Search current selections (smart). */
  searchSelectionSmart,
  /** Search current selections. */
  searchSelection,
  /** Select whole object. */
  objectsSelect,
  /** Select inner object. */
  objectsSelectInner,
  /** Select to the whole object start. */
  objectsSelectToStart,
  /** Select to the whole object end. */
  objectsSelectToEnd,
  /** Repeat object select. */
  objectsSelectRepeat,
  /** Insert value in register. */
  registersInsert,
  /** Select register for next command. */
  registersSelect,
  /** Save selections. */
  marksSaveSelections,
  /** Restore selections. */
  marksRestoreSelections,
  /** Combine current selections with ones from register. */
  marksCombineSelectionsFromCurrent,
  /** Combine register selections with current ones. */
  marksCombineSelectionsFromRegister,
  /** Move left (extend). */
  leftExtend,
  /** Move right (extend). */
  rightExtend,
  /** Move up (extend). */
  upExtend,
  /** Move down (extend). */
  downExtend,
  /** Extend to the next character pressed, including it. */
  selectToIncludedExtend,
  /** Extend with until the next character pressed, excluding it. */
  selectToExcludedExtend,
  /** Extend with line on which the end of each selection lies (or next line when end lies on an end-of-line). */
  selectLineExtend,
  /** Extend with the word and following whitespaces on the right of the end of each selection. */
  selectWordExtend,
  /** Extend with preceding whitespaces and the word on the left of the end of each selection. */
  selectWordPreviousExtend,
  /** Extend with preceding whitespaces and the word on the right of the end of each selection. */
  selectWordEndExtend,
  /** Extend with the non-whitespace word and following whitespaces on the right of the end of each selection. */
  selectWordAltExtend,
  /** Extend with preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
  selectWordAltPreviousExtend,
  /** Extend with preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
  selectWordAltEndExtend,
  /** Search for the given input string (extend). */
  searchExtend,
  /** Search for the given input string before the current selections (extend). */
  searchBackwardsExtend,
  /** Extend to the whole object start. */
  objectsSelectToStartExtend,
  /** Extend to the whole object end. */
  objectsSelectToEndExtend,
  /** Select to the next character pressed, including it. (backwards) */
  selectToIncludedBackwards,
  /** Select until the next character pressed, excluding it. (backwards) */
  selectToExcludedBackwards,
  /** Extend to the next character pressed, including it. (backwards) */
  selectToIncludedExtendBackwards,
  /** Extend with until the next character pressed, excluding it. (backwards) */
  selectToExcludedExtendBackwards,
  /** Select to the inner object start. */
  objectsSelectToStartInner,
  /** Select to the inner object end. */
  objectsSelectToEndInner,
  /** Extend to the inner object start. */
  objectsSelectToStartExtendInner,
  /** Extend to the inner object end. */
  objectsSelectToEndExtendInner,
  /** Adds 0 to the current counter for the next operation. */
  count0,
  /** Adds 1 to the current counter for the next operation. */
  count1,
  /** Adds 2 to the current counter for the next operation. */
  count2,
  /** Adds 3 to the current counter for the next operation. */
  count3,
  /** Adds 4 to the current counter for the next operation. */
  count4,
  /** Adds 5 to the current counter for the next operation. */
  count5,
  /** Adds 6 to the current counter for the next operation. */
  count6,
  /** Adds 7 to the current counter for the next operation. */
  count7,
  /** Adds 8 to the current counter for the next operation. */
  count8,
  /** Adds 9 to the current counter for the next operation. */
  count9
}

/** An enum which maps command names to command IDs. */
export const enum Command {
  /** Toggles Dance key bindings. */
  toggle = 'dance.toggle',
  /** Set Dance mode to Normal. */
  setNormal = 'dance.set.normal',
  /** Set Dance mode to Insert. */
  setInsert = 'dance.set.insert',
  /** Switches to normal mode temporarily. */
  tmpNormal = 'dance.tmp.normal',
  /** Switches to insert mode temporarily. */
  tmpInsert = 'dance.tmp.insert',
  /** Start insert before the current selections. */
  insertBefore = 'dance.insert.before',
  /** Start insert after the current selections. */
  insertAfter = 'dance.insert.after',
  /** Start insert at line start of each selection. */
  insertLineStart = 'dance.insert.lineStart',
  /** Start insert at line end of each selection. */
  insertLineEnd = 'dance.insert.lineEnd',
  /** Create new line and start insert below. */
  insertNewLineBelow = 'dance.insert.newLine.below',
  /** Create new line and start insert above. */
  insertNewLineAbove = 'dance.insert.newLine.above',
  /** Add a new line below, without entering insert mode. */
  newLineBelow = 'dance.newLine.below',
  /** Add a new line above, without entering insert mode. */
  newLineAbove = 'dance.newLine.above',
  /** Move left. */
  left = 'dance.left',
  /** Move right. */
  right = 'dance.right',
  /** Move up. */
  up = 'dance.up',
  /** Move down. */
  down = 'dance.down',
  /** Select to the next character pressed, including it. */
  selectToIncluded = 'dance.select.to.included',
  /** Select until the next character pressed, excluding it. */
  selectToExcluded = 'dance.select.to.excluded',
  /** Select whole buffer. */
  selectBuffer = 'dance.select.buffer',
  /** Select line on which the end of each selection lies (or next line when end lies on an end-of-line). */
  selectLine = 'dance.select.line',
  /** Extend selections to contain full lines (including end-of-lines). */
  expandLines = 'dance.expandLines',
  /** Trim selections to only contain full lines (not including last end-of-line). */
  trimLines = 'dance.trimLines',
  /** Select the word and following whitespaces on the right of the end of each selection. */
  selectWord = 'dance.select.word',
  /** Select preceding whitespaces and the word on the left of the end of each selection. */
  selectWordPrevious = 'dance.select.word.previous',
  /** Select preceding whitespaces and the word on the right of the end of each selection. */
  selectWordEnd = 'dance.select.word.end',
  /** Select the non-whitespace word and following whitespaces on the right of the end of each selection. */
  selectWordAlt = 'dance.select.word.alt',
  /** Select preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
  selectWordAltPrevious = 'dance.select.word.alt.previous',
  /** Select preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
  selectWordAltEnd = 'dance.select.word.alt.end',
  /** Select within current selections according to a RegExp. */
  select = 'dance.select',
  /** Split within current selections according to a RegExp. */
  split = 'dance.split',
  /** Split selections into lines. */
  splitLines = 'dance.split.lines',
  /** Select first and last characters of each selection. */
  selectFirstLast = 'dance.select.firstLast',
  /** Clear selections (except main) */
  selectionsClear = 'dance.selections.clear',
  /** Clear main selection. */
  selectionsClearMain = 'dance.selections.clearMain',
  /** Keep selections that match a RegExp. */
  selectionsKeepMatching = 'dance.selections.keepMatching',
  /** Clear selections that match a RegExp. */
  selectionsClearMatching = 'dance.selections.clearMatching',
  /** Pipe each selection to a program, and keeps it if the program returns 0. */
  pipeFilter = 'dance.pipe.filter',
  /** Pipe each selection to a command, and replaces it with its output. */
  pipeReplace = 'dance.pipe.replace',
  /** Pipe each selection to a command, ignoring their results. */
  pipeIgnore = 'dance.pipe.ignore',
  /** Pipe each selection to a command, appending the output after the selection. */
  pipeAppend = 'dance.pipe.append',
  /** Pipe each selection to a command, prepending the output before the selection. */
  pipePrepend = 'dance.pipe.prepend',
  /** Rotate each selection clockwise. */
  rotate = 'dance.rotate',
  /** Rotate each selection counter-clockwise. */
  rotateBackwards = 'dance.rotate.backwards',
  /** Rotate content of each selection clockwise. */
  rotateContent = 'dance.rotate.content',
  /** Rotate content of each selection counter-clockwise. */
  rotateContentBackwards = 'dance.rotate.content.backwards',
  /** Search for the given input string. */
  search = 'dance.search',
  /** Search for the given input string before the current selections. */
  searchBackwards = 'dance.search.backwards',
  /** Search current selections (smart). */
  searchSelectionSmart = 'dance.search.selection.smart',
  /** Search current selections. */
  searchSelection = 'dance.search.selection',
  /** Select whole object. */
  objectsSelect = 'dance.objects.select',
  /** Select inner object. */
  objectsSelectInner = 'dance.objects.select.inner',
  /** Select to the whole object start. */
  objectsSelectToStart = 'dance.objects.selectToStart',
  /** Select to the whole object end. */
  objectsSelectToEnd = 'dance.objects.selectToEnd',
  /** Repeat object select. */
  objectsSelectRepeat = 'dance.objects.select.repeat',
  /** Insert value in register. */
  registersInsert = 'dance.registers.insert',
  /** Select register for next command. */
  registersSelect = 'dance.registers.select',
  /** Save selections. */
  marksSaveSelections = 'dance.marks.saveSelections',
  /** Restore selections. */
  marksRestoreSelections = 'dance.marks.restoreSelections',
  /** Combine current selections with ones from register. */
  marksCombineSelectionsFromCurrent = 'dance.marks.combineSelections.fromCurrent',
  /** Combine register selections with current ones. */
  marksCombineSelectionsFromRegister = 'dance.marks.combineSelections.fromRegister',
  /** Move left (extend). */
  leftExtend = 'dance.left.extend',
  /** Move right (extend). */
  rightExtend = 'dance.right.extend',
  /** Move up (extend). */
  upExtend = 'dance.up.extend',
  /** Move down (extend). */
  downExtend = 'dance.down.extend',
  /** Extend to the next character pressed, including it. */
  selectToIncludedExtend = 'dance.select.to.included.extend',
  /** Extend with until the next character pressed, excluding it. */
  selectToExcludedExtend = 'dance.select.to.excluded.extend',
  /** Extend with line on which the end of each selection lies (or next line when end lies on an end-of-line). */
  selectLineExtend = 'dance.select.line.extend',
  /** Extend with the word and following whitespaces on the right of the end of each selection. */
  selectWordExtend = 'dance.select.word.extend',
  /** Extend with preceding whitespaces and the word on the left of the end of each selection. */
  selectWordPreviousExtend = 'dance.select.word.previous.extend',
  /** Extend with preceding whitespaces and the word on the right of the end of each selection. */
  selectWordEndExtend = 'dance.select.word.end.extend',
  /** Extend with the non-whitespace word and following whitespaces on the right of the end of each selection. */
  selectWordAltExtend = 'dance.select.word.alt.extend',
  /** Extend with preceding whitespaces and the non-whitespace word on the left of the end of each selection. */
  selectWordAltPreviousExtend = 'dance.select.word.alt.previous.extend',
  /** Extend with preceding whitespaces and the non-whitespace word on the right of the end of each selection. */
  selectWordAltEndExtend = 'dance.select.word.alt.end.extend',
  /** Search for the given input string (extend). */
  searchExtend = 'dance.search.extend',
  /** Search for the given input string before the current selections (extend). */
  searchBackwardsExtend = 'dance.search.backwards.extend',
  /** Extend to the whole object start. */
  objectsSelectToStartExtend = 'dance.objects.selectToStart.extend',
  /** Extend to the whole object end. */
  objectsSelectToEndExtend = 'dance.objects.selectToEnd.extend',
  /** Select to the next character pressed, including it. (backwards) */
  selectToIncludedBackwards = 'dance.select.to.included.backwards',
  /** Select until the next character pressed, excluding it. (backwards) */
  selectToExcludedBackwards = 'dance.select.to.excluded.backwards',
  /** Extend to the next character pressed, including it. (backwards) */
  selectToIncludedExtendBackwards = 'dance.select.to.included.extend.backwards',
  /** Extend with until the next character pressed, excluding it. (backwards) */
  selectToExcludedExtendBackwards = 'dance.select.to.excluded.extend.backwards',
  /** Select to the inner object start. */
  objectsSelectToStartInner = 'dance.objects.selectToStart.inner',
  /** Select to the inner object end. */
  objectsSelectToEndInner = 'dance.objects.selectToEnd.inner',
  /** Extend to the inner object start. */
  objectsSelectToStartExtendInner = 'dance.objects.selectToStart.extend.inner',
  /** Extend to the inner object end. */
  objectsSelectToEndExtendInner = 'dance.objects.selectToEnd.extend.inner',
  /** Adds 0 to the current counter for the next operation. */
  count0 = 'dance.count.0',
  /** Adds 1 to the current counter for the next operation. */
  count1 = 'dance.count.1',
  /** Adds 2 to the current counter for the next operation. */
  count2 = 'dance.count.2',
  /** Adds 3 to the current counter for the next operation. */
  count3 = 'dance.count.3',
  /** Adds 4 to the current counter for the next operation. */
  count4 = 'dance.count.4',
  /** Adds 5 to the current counter for the next operation. */
  count5 = 'dance.count.5',
  /** Adds 6 to the current counter for the next operation. */
  count6 = 'dance.count.6',
  /** Adds 7 to the current counter for the next operation. */
  count7 = 'dance.count.7',
  /** Adds 8 to the current counter for the next operation. */
  count8 = 'dance.count.8',
  /** Adds 9 to the current counter for the next operation. */
  count9 = 'dance.count.9'
}
